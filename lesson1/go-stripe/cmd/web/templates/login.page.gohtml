{{template "base" .}}

{{define "title"}}
    Login
{{end}}

{{define "content"}}
    <form action="" method="post"
        name="charge_form" id="charge_form"
        class="d-block needs-validation charge-form"
        autocomplete="off" novalidate="">

        <h2 class="mt-3 text-center mb-3">Login</h2>
        <hr>

        <div class="mb-3">
            <label for="email" class="form-label">Email</label>
            <input type="email" class="form-control" id="email" name="email"
                required="" autocomplete="email-new">
        </div>

        <div class="mb-3">
            <label for="password" class="form-label">Password</label>
            <input type="password" class="form-control" id="password" name="password" required="" autocomplete="password-new">
        </div>
        <hr>

        <a href="javascript:void(0)" class="btn btn-primary" onclick="val()">Login</a>

    </form>
{{end}}

{{define "js"}}
<script>
    function val() {
        let card;
        let stripe;
        const cardMessages = document.getElementById("card-messages");
        const payButton = document.getElementById("pay-button");
        const processing = document.getElementById("processing-payment");

        stripe = Stripe("pk_test_51RAiiJQIYevZnwnf6k5vtRV78yxyQfnTaGfRJ4C6aShdwPF0jYyZaf33WivHo2XMW2ODZUSGGbya0qZ58KL2oYYm00fWUTFAD9");
        {{/* stripe = Stripe({{.StripePublishableKey}}); */}}

        function hidePayButton() {
            payButton.classList.add("d-none");
            processing.classList.remove("d-none");
        }

        function showPayButtons() {
            payButton.classList.remove("d-none");
            processing.classList.add("d-none");
        }

        function showCardError(msg) {
            cardMessages.classList.add("alert-danger");
            cardMessages.classList.remove("alert-success");
            cardMessages.classList.remove("d-none");
            cardMessages.innerText = msg;
        }

        function showCardSuccess() {
            cardMessages.classList.remove("alert-danger");
            cardMessages.classList.add("alert-success");
            cardMessages.classList.remove("d-none");
            cardMessages.innerText = "Transaction successful";
        }

        function val() {
            let form = document.getElementById("charge_form");
            if (form.checkValidity() === false) {
                this.event.preventDefault();
                this.event.stopPropagation();
                form.classList.add("was-validated");
                return;
            }
            form.classList.add("was-validated");
            hidePayButton();

            let amountToCharge = document.getElementById("amount").value;
            
            let payload = {
                amount: amountToCharge,
                currency: 'cad',
            }

            const requestOptions = {
                method: 'post',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(payload),
            }

            {{/* fetch("http://localhost:4001/api/payment-intent", requestOptions) */}}
            fetch("{{.API}}/api/payment-intent", requestOptions)
                .then(response => response.text())
                .then(response => {
                    let data;
                    try {
                        data = JSON.parse(response);
                        stripe.confirmCardPayment(data.client_secret, {
                            payment_method: {
                                card: card,
                                billing_details: {
                                    name: document.getElementById("cardholder-name").value,
                                }
                            }
                        }).then(function(result) {
                            if (result.error) {
                                // card declined, or something went wrong with the card
                                showCardError(result.error.message);
                                showPayButtons();
                            } else if(result.paymentIntent) {
                                if (result.paymentIntent.status === "succeeded") {
                                    // we have charged the card
                                    document.getElementById("payment_method").value = result.paymentIntent.payment_method;
                                    document.getElementById("payment_intent").value = result.paymentIntent.id;
                                    document.getElementById("payment_amount").value = result.paymentIntent.amount;
                                    document.getElementById("payment_currency").value = result.paymentIntent.currency;
                                    processing.classList.add("d-none");
                                    showCardSuccess();
                                    document.getElementById("charge_form").submit();
                                }
                            }
                        })
                    } catch (err) {
                        console.log(err);
                        showCardError("Invalid response from payment gateway!");
                        showPayButtons();
                    }
                })
        }
    }
</script>
{{end}}